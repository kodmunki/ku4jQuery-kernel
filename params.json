{"name":"ku4js-kernel","tagline":"kodmunki™ utilities for JavaScript kernel","body":"#ku4js-kernel\r\n\r\nkodmunki™ utilities for JavaScript kernel is a library for OO JavaScript development.\r\n\r\nku4js-kernel contains numerous useful classes including collections, math, geometry, and numerous common\r\ndesign patterns.\r\n\r\n<img src=\"http://www.kodmunki.com/media/logo-small.png\" alt=\"kodmunki\" />\r\n\r\n---\r\n\r\n#kodmunki™ build process\r\n\r\nThis build process is dependent upon yuicompressor and a specific directory structure:\r\n\r\n* root\r\n *:_build (This build script and the yuicompressor)\r\n * bin (The compiled scripts will appear here)\r\n * src (All script files go here)\r\n\r\nThe following variables found in setup () are\r\nexpected to be changed by the developer running\r\nthis process:\r\n\r\n* PROJNAME (The name of your project)\r\n* STARTMSG (A message to echo at start of build)\r\n* ENDMSG (A message to echo at end of build)\r\n\r\n---\r\n\r\n#Documentation\r\nThe following is documentation for each class in the ku4js-kernel library organized by common domain to follow the\r\ndirectory structure found in /src. All constructors are empty unless otherwise noted.\r\n\r\n##Class\r\nClass is a foundational class that numerous other classes inherit from offering the subclasses a common property API\r\nthat includes get(), set(), and property() which is a getter/setter. It also exposes the inheritance API. To subclass\r\nJavaScript classes using the kernel Class one would first create their class and then subclass as follows:\r\n\r\n```javascript\r\nfunction myClass() {\r\n    myClass.base.call(this); //This line scopes the class hierarchy.\r\n}\r\nmyClass.prototype = {\r\n    /*All prototype methods go here*/\r\n};\r\n$.Class.extend(myClass, $.Class); //We are creating our subclass here.\r\n\r\n$.myApp.myClass = function() { return new myClass(); } //We are exposing myClass for use here\r\n```\r\nWith the above implementation. A developer can now call $.myApp.myClass() from within their application to instantiate\r\na new myClass that contains get(), set(), and property(). Also, it is important to note that many ku4* classes can be\r\ninherited using the same convention as class. For example, to inherit from $.mediator, a developer would simply replace\r\n$.Class.extend(myClass, $.Class) in the example above with $.Class.extend(myClass, $.mediator.Class)\r\n\r\n##Base\r\n\r\n###math\r\nConvenient math operations, and some that fix some odd bugs.\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| round(value:_Number_, nearest:_Number_) | Number | Rounds value to the nearest, where nearest is the base 10 exponent to which to round |\r\n| roundUp(value:_Number_, nearest:_Number_) | Number | Rounds value up to the nearest, where nearest is the base 10 exponent to which to round |\r\n| roundDown(value:_Number_, nearest:_Number_) | Number | Rounds value down to the nearest, where nearest is the base 10 exponent to which to round |\r\n\r\n###str\r\nConvenient string operations.\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| trimStart(value:_String_) | String | Returns a string with leading whitespace trimmed. |\r\n| trimEnd(value:_String_) | String | Returns a string with trailing whitespace trimmed. |\r\n| trim(value:_String_) | String | Returns a string with leading and trailing whitespace trimmed. |\r\n| format(value:_String_, ...:_String_) | String | Returns a string replacing the format placeholders with the following arguments. |\r\n| render(value:_String_, obj:_object_) | String | Returns a string replacing the format placeholders with the values of the key, value pairs in the following object argument. |\r\n| encodeBase64(value:_String_) | String | Returns a base 64 encoded string from value. |\r\n| decodeBase64(value:_String_) | String | Returns a string from a base 64 encoded value. |\r\n| parse(value:_Number_, ...:_Number_) | String | Returns a string from the character code arguments. |\r\n\r\n###uid\r\nA 32 character random unique ID.\r\n\r\n##Account\r\n\r\n###emailAddress\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| local() | String | Returns the local portion of the email address. |\r\n| domain() | String | Returns the domain portion of the email address. |\r\n| topLevelDomain() | String | Returns the top level domain portion of the email address. |\r\n| equals(other:_emailAddress_) | Boolean | Returns true if the email addresses are equal. |\r\n| toString() | String | Returns a string representation of the email address. |\r\n| parse(string:_String_) | emailAddress | Returns an email address containing the corresponding components. |\r\n\r\n###phoneNumber\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| value() | Number | Returns a number value of the phone number. |\r\n| equals(other:_phoneNumber_) | Boolean | Returns true if the this is equal to other. |\r\n| toStringWithFormat(format:_String_) | String | Returns a string value replacing each instance of \"#\" with the subsequent number in the value. Example: $.phoneNumber(2224441234).toStringWithFormat(\"(###) ###-####\") == \"(222) 444-1234\" |\r\n| parse(string:_String_) | phoneNumber | Returns a phoneNumber with corresponding value. |\r\n\r\n###properName\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| first() | String | Returns the first name. |\r\n| middle() | String | Returns the middle name. |\r\n| last() | String | Returns the last name. |\r\n| full() | String | Returns the first middle and last name concatenated with space character separators. |\r\n| initials() | String | Returns the first letter of each name part capitalized and followed by a . character and a space character separator. |\r\n| equals(other_properName_) | String | Returns true if each part of this is equal to the corresponding part of other. |\r\n| toStringWithFormat(format:_String_) | String | Returns a string formatted with the passed format. The rules are: {F} = first name, {f} = first initial, {M} = middle name, {m} = middle initial, {L} = last name, {l} = last initial. Example $.properName(\"John\", \"Jacob\", \"Doe\").toStringWithFormat(\"{L} {F}, {m}.\") == \"Doe John, J.\" |\r\n\r\n##Collections\r\n\r\n###hash\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| count() | Number | Returns the number of items in the hash. |\r\n| keys() | Array | Returns an array of all keys. |\r\n| values() | Array | Returns an array of all values. |\r\n| add(key:_String_, value:_Object_) | this | Adds value to hash with key. |\r\n| update(key:_String_, value:_Object_) | this | Updates the value at key. |\r\n| remove(key:_String_) | this | Removes the key, value pair that has key. |\r\n| clear() | this | Removes all key, value pairs. |\r\n| findKey(value:_Object_) | String | Returns the key for value. |\r\n| findValue(key:_String_) | Object | Returns the value at key.  |\r\n| each(func:_function_, scope:_Object?_) | this | Calls func for each item in the hash passing the object {\"key\": key, \"value\": value} on each pass. If scope is passed function will be called in the passed scope. |\r\n| quit() | this | Breaks the call. |\r\n| contains(value:_hash/object_) | Boolean | Returns true if the hash contains the passed value.  |\r\n| containsKey(key:_String_) | Boolean | Returns true if the hash contains the key. |\r\n| containsValue(value:_Object_) | Boolean | Returns true if the hash contains the value. |\r\n| isEmpty() | Boolean | Returns true if the hash is empty. |\r\n| merge(other:_hash/object_) | hash | Returns a new hash contains key, value pairs are a combination of the current hash and other giving precedence to the current hash for common keys. |\r\n| meld(other:_hash/object_) | hash | Returns a new hash contains key, value pairs are a combination of the current hash and other giving precedence to the other hash for common keys. |\r\n| replicate() | hash | Returns a copy of the current hash. |\r\n| toObject() | object | Returns an object that contains key, value pairs equivalent to the key, value pairs of the current hash. |\r\n\r\n###list\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| count() | Number | Returns the number of items in the list. |\r\n| add(item:_Object_, value:_Object_) | this | Adds value to list with key. |\r\n| remove(item:_Object_) | this | Removes the item. |\r\n| clear() | this | Removes all items. |\r\n| find(index:_Number_) | String | Returns the key for value. |\r\n| each(func:_function_, scope:_Object?_) | this | Calls func for each item in the list passing the item on each pass. If scope is passed function will be called in the passed scope. |\r\n| quit() | this | Breaks the call. |\r\n| contains(item:_Object_) | Boolean | Returns true if the list contains the value. |\r\n| toArray() | object | Returns an array that contains items equivalent to the items of the current list. |\r\n\r\n##Datetime\r\n\r\n###dayPoint\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| value() | Date | Returns the Date value |\r\n| day() | Number | Returns the zero indexed day of the week |\r\n| date() | Number | Returns the date |\r\n| month() | Number | Returns the month |\r\n| year() | Number | Returns the year |\r\n| isWeekday() | Boolean | Returns true if the day is 1-5 |\r\n| isWeekend() | Boolean | Returns true if the day is 0 or 6 |\r\n| isLeapYear() | Boolean | Returns true if the year contains a 29th day in the second month |\r\n| nextDay() | dayPoint | Returns the next day |\r\n| prevDay() | dayPoint | Returns the previous day |\r\n| add(years:_Number_, months:_Number_, days:_Number_) | dayPoint |  |\r\n| firstDayOfMonth() | dayPoint | Returns the first day of the current month |\r\n| LastDayOfMonth() | dayPoint | Returns the last day of the current month |\r\n| isBefore(other:_dayPoint_) | Boolean | Returns true if other is earlier than this dayPoint |\r\n| isAfter(other:_dayPoint_) | Boolean | Returns true if other is later than this dayPoint |\r\n| equals(other:_dayPoint_) | Boolean | Returns true if other is equal to than this dayPoint |\r\n| toString() | String | Returns the string value of the dayPoint |\r\n| toStringWithFormat(format:_String_) | String | Returns a string formatted per the passed format. Example: $.dayPoint(2013, 5, 24).toStringWithFormat(\"mm/dd/yy\") == \"05/24/13\" |\r\n| toDate() | Date | Returns a Date value |\r\n| toJson() | String | Returns the JSON string value |\r\n| canParse(string:_String_) | Boolean | Returns true if the string can be parsed into a dayPoint |\r\n| parse(string:_String_) | dayPoint | Returns a dayPoint with the appropriate value |\r\n| tryParse(string:_String_) | dayPoint | Returns a dayPoint with the appropriate value or null if the string value cannot be parsed |\r\n| today() | dayPoint | Returns a dayPoint with the value, today |\r\n| assumeNow(dayPoint:_dayPoint_) | void | Sets today as dayPoint. Can be very useful in testing application features that are date dependent. This feature allows the development of date dependent features without the need to manipulate system time. |\r\n\r\n##Finance\r\n\r\n###money\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| cents() | Number | Returns the fractional value of the money. |\r\n| dollars() | Number | Returns the whole value of the money. |\r\n| currency() | String | Returns the currency. \"$\" is the default. |\r\n| value() | Number | Returns the entire value of the money. |\r\n| add(other:_money_) | money | Returns a money whose value is the sum on this value plus other value. |\r\n| divide(divisor:_Number_) | money | Returns a money whose value is the quotient of this value divided by divisor.  |\r\n| equals(other:_money_) |Boolean  | Return true if this value equals other value. |\r\n| exchange(rate:_Number_, currency:_String_) | money  | Return a money of currency with value or this times rate. |\r\n| isOfCurrency(other:_money_) | Boolean | Return true if this currency is equal to other currency. |\r\n| isGreaterThan(other:_money_) | Boolean | Return true if this value > other value. |\r\n| isLessThan(other:_money_) | Boolean | Returns true if this value < other value. |\r\n| multiply(multiplier:_Number_) | money | Returns a money whose value is the product of this value times the multiplier. |\r\n| round() | money | Returns a money whose value is the value of this money rounded to the nearest hundredth. |\r\n| roundDown() | money | Returns a money whose value is the value of this money rounded down to the nearest hundredth. |\r\n| roundUp() | money | Returns a money whose value is the value of this money rounded up to the nearest hundredth. |\r\n| nearestDollar() | money | Returns a money whose value is the value of this money rounded to the nearest whole value. |\r\n| subtract(other:_money_) | money | Returns a money whose value is the difference of this value minus other value. |\r\n| toString(tens:_String_, tenths:_String_) | String | Returns a string representation of the money. There are two optional parameters tens and tenths. These values act as the separators for the tens and the tenths respectively. That is as an example $.money(12345678.90).toString(\"-\", \"|\") == \"$12-345-678|90\". |\r\n| zero() | money | Returns a money with value 0. |\r\n| isMoney(other:_money_) | Boolean | Returns true if other is and instance of money |\r\n| canParse(string:_String_) | money | Returns true if the string can be parsed to money. |\r\n| parse(string:_String_) | money | Returns a money with corresponding value. |\r\n| tryParse(string:_String_) | money | Returns a money with corresponding value if string can be parsed. Otherwise, null. |\r\n\r\n##Geometry\r\n\r\n###coord\r\n_Documentation Coming Soon_\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n|  |  |  |\r\n\r\n###point\r\n_Documentation Coming Soon_\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n|  |  |  |\r\n\r\n###rectangle\r\n_Documentation Coming Soon_\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n|  |  |  |\r\n\r\n###vector\r\n_Documentation Coming Soon_\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n|  |  |  |\r\n\r\n##Patterns\r\n\r\n###iterator\r\n_Documentation Coming Soon_\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n|  |  |  |\r\n\r\n###mediator\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| throwErrors() | this | Causes errors that occur in the notification process to be thrown, which will kill the JavaScript process if left unhandled. |\r\n| logErrors() | this | Causes errors that occur in the notification process to be logged to the console, allowing the JavaScript process to continue. |\r\n| catchErrors() | this | Causes errors that occur in the notification process to be silenced, allowing the JavaScript process to continue. |\r\n| isEmpty() | Boolean | Returns true if there are no subscribers. |\r\n| count() | Number | Returns that number of subscription managers. |\r\n| activeSubscriptionKeys() | Array | Returns an array of active subscription keys. |\r\n| subscribe(name_String_, method:_function_, scope:_Object?_, id:_String?_) | this | Subscribes method to be called in scope when name is notified. id is optional and used to unsubscribe |\r\n| unsubscribe(name_String_, id:_String?_) | this | Removes subscriber of id from all name notifications |\r\n| notify(filtersCSV:_String_, data:_Object_ ...) | this | Notifies subscribers by name with data. data and name are optional parameters and multiple data and multiple names may be passed. If no names are supplied all subscribers are notified. The names string can be a single name or a CSV of names. If no data is passed, no data is sent to the subscribers in the notification.  |\r\n| clear() | this | Clears all subscribers. |\r\n\r\n####mediator notes!\r\nThis is a very powerful and useful pattern, but it comes with developer responsibilities. Below are some gotchas that\r\nmay arise when used irresponsibly, ignorantly, or unknowingly.\r\n\r\n* You can setting the mediator to throwErrors or logErrors. Exceptions that arise in a methods that execute\r\nthrough notification can be difficult to debug. Setting how the mediator handles these exceptions can be of great help\r\nin development.\r\n\r\n###observer\r\n_Documentation Coming Soon_\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n|  |  |  |\r\n\r\n###queue\r\n_Documentation Coming Soon_\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n|  |  |  |\r\n\r\n###specification\r\nConstructor: $.spec(func:_function_). The function passed must take a value parameter and return a boolean value.\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n| and(other:_spec_) | spec | Returns a new spec whose isSatisfiedBy method is an evaluation of the current spec AND the other spec |\r\n| or(other:_spec_) | spec | Returns a new spec whose isSatisfiedBy method is an evaluation of the current spec OR the other spec |\r\n| xor(other:_spec_) | spec | Returns a new spec whose isSatisfiedBy method is an evaluation of the current spec XOR the other spec |\r\n| not() | spec | Inverts the return value of isSatisfiedBy |\r\n| isSatisfiedBy(value) | Boolean | Returns a boolean value of true if the value passed satisfies the specification |\r\n\r\n####Spec Example:\r\n```javascript\r\nvar oneSpec = $.spec(function(value) { return value === 1; }),\r\n    twoSpec = $.spec(function(value) { return value === 2; }),\r\n    oneOrTwoSpec = oneSpec.or(twoSpec);\r\n\r\nconsole.log(oneSpec.isSatisfiedBy(1)) //Evaluates as true\r\nconsole.log(twoSpec.isSatisfiedBy(1)) //Evaluates as false\r\nconsole.log(oneOrTwoSpec.isSatisfiedBy(2)) //Evaluates as true\r\nconsole.log(oneOrTwoSpec.isSatisfiedBy(3)) //Evaluates as false\r\n```\r\n\r\n###stack\r\n_Documentation Coming Soon_\r\n\r\n| API | Return | Description |\r\n| --- | --- | --- |\r\n|  |  |  |","google":"UA-55815054-1","note":"Don't delete this file! It's used internally to help with page regeneration."}